.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.13
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` 
.    ds C' 
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "uuid 3"
.TH uuid 3 "OSSP uuid 0.9.0" "10-Jan-2004" "Universally Unique Identifiers"
.SH "NAME"
\&\fBOSSP uuid\fR \- \fBUniversally Unique Identifier\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fB\s-1OSSP\s0 uuid\fR is a ISO-C application programming interface (\s-1API\s0) and
corresponding command line interface (\s-1CLI\s0) for the generation of \s-1DCE\s0
1.1 and \s-1ISO/IEC\s0 11578:1996 compliant \fIUniversally Unique Identifiers\fR
(\s-1UUID\s0). It supports \s-1DCE\s0 1.1 variant UUIDs of version 1 (time and node
based), version 3 (name based) and version 4 (random number based).
.PP
This is the ISO-C application programming interface (\s-1API\s0).
.Sh "Overview"
.IX Subsection "Overview"
\&\fB\s-1UUID\s0\fR stands for \fBU\fRniversal \fBU\fRnique \fB\s-1ID\s0\fRentifier (aka \fB\s-1GUID\s0\fR
which stands for \fBG\fRlobally \fBU\fRnique \fB\s-1ID\s0\fRentifier). \fB\s-1UUID\s0\fRs are 128
bit numbers assigned to any object and which are intended to have a high
likelihood of uniqueness over space and time and are computationally
difficult to guess.
.PP
UUIDs are 128 bit numbers which are intended to have a high likelihood
of uniqueness over space and time and are computationally difficult
to guess. They are globally unique identifiers which can be locally
generated without contacting a global registration authority. UUIDs are
intended as unique identifiers for both mass tagging objects with an
extremely short lifetime and to reliably identifying very persistent
objects across a network.
.PP
A \fB\s-1UUID\s0\fR is usually encoded using the \s-1ASCII\s0 character string
representation described in \s-1ISO/IEC\s0 11578:1996: a string
consisting of 8 hexadecimal digits followed by a hyphen,
then three groups of 4 hexadecimal digits each followed by a
hyphen, then 12 hexadecimal digits. An example of a \fB\s-1UUID\s0\fR is
"\f(CW\*(C`54531d28\-402b\-11d8\-af12\-0002a5094c23\*(C'\fR".
.Sh "Uniqueness"
.IX Subsection "Uniqueness"
The mechanism used to guarantee that \fB\s-1UUID\s0\fRs are unique is
through combinations of hardware addresses, time stamps and random
seeds.
.PP
There is a reference in the \fB\s-1UUID\s0\fR to the hardware (\s-1MAC\s0) address of
the first network interface card (\s-1NIC\s0) on the host which generated the
\&\fB\s-1UUID\s0\fR \*(-- this reference is intended to ensure the \fB\s-1UUID\s0\fR will be
unique in space as the \s-1MAC\s0 address of every network card is assigned by
a single global authority (\s-1IEEE\s0) and is guaranteed to be unique.
.PP
The next component in a \fB\s-1UUID\s0\fR is a timestamp which, as clock always
(should) move forward, will be unique in time.
.PP
Just in case some part of the above goes wrong (the hardware address
cannot be determined or the clock moved a step backward), there is
a random component placed into the \fB\s-1UUID\s0\fR as a \*(L"catch\-all\*(R" for
uniqueness.
.SH "APPLICATION PROGRAMMING INTERFACE"
.IX Header "APPLICATION PROGRAMMING INTERFACE"
.IP "uuid_rc_t \fBuuid_create\fR(uuid_t **\fIuuid\fR);" 4
.IX Item "uuid_rc_t uuid_create(uuid_t **uuid);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_destroy\fR(uuid_t *\fIuuid\fR);" 4
.IX Item "uuid_rc_t uuid_destroy(uuid_t *uuid);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_nil\fR(uuid_t *\fIuuid\fR);" 4
.IX Item "uuid_rc_t uuid_nil(uuid_t *uuid);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_compare\fR(uuid_t *\fIuuid\fR, uuid_t *\fIuuid2\fR, int *\fIresult\fR);" 4
.IX Item "uuid_rc_t uuid_compare(uuid_t *uuid, uuid_t *uuid2, int *result);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_isnil\fR(uuid_t *\fIuuid\fR, int *\fIresult\fR);" 4
.IX Item "uuid_rc_t uuid_isnil(uuid_t *uuid, int *result);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_unpack\fR(uuid_t *\fIuuid\fR, const void *\fIbuf\fR);" 4
.IX Item "uuid_rc_t uuid_unpack(uuid_t *uuid, const void *buf);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_pack\fR(uuid_t *\fIuuid\fR, void **\fIbuf\fR);" 4
.IX Item "uuid_rc_t uuid_pack(uuid_t *uuid, void **buf);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_parse\fR(uuid_t  *\fIuuid\fR, const char  *\fIstr\fR);" 4
.IX Item "uuid_rc_t uuid_parse(uuid_t  *uuid, const char  *str);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_format\fR(uuid_t *\fIuuid\fR, char **\fIstr\fR);" 4
.IX Item "uuid_rc_t uuid_format(uuid_t *uuid, char **str);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_generate\fR(uuid_t *\fIuuid\fR, unsigned int \fImode\fR, ...);" 4
.IX Item "uuid_rc_t uuid_generate(uuid_t *uuid, unsigned int mode, ...);"
\&\s-1FIXME\s0
.IP "uuid_rc_t \fBuuid_dump\fR(uuid_t *\fIuuid\fR, char **\fIstr\fR);" 4
.IX Item "uuid_rc_t uuid_dump(uuid_t *uuid, char **str);"
\&\s-1FIXME\s0
.IP "char *\fBuuid_error\fR(uuid_rc_t \fIrc\fR);" 4
.IX Item "char *uuid_error(uuid_rc_t rc);"
\&\s-1FIXME\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See the following are references to more \fB\s-1UUID\s0\fR documentation and specifications:
.IP "\(bu" 4
\&\fBUUIDs and GUIDs\fR,
\&\s-1IETF\s0 Internet Draft (expired),
Paul J. Leach, Rich Salz,
February 1998, 27 pages,
http://www.opengroup.org/dce/info/draft\-leach\-uuids\-guids\-01.txt
.IP "\(bu" 4
\&\fB\s-1DCE\s0 1.1: Remote Procedure Call\fR,
appendix \fBUniversally Unique Identifier\fR,
Open Group Technical Standard
Document Number C706, August 1997, 737 pages,
(supercedes C309 \s-1DCE:\s0 Remote Procedure Call 8/1994,
which was basis for \s-1ISO/IEC\s0 11578:1996 specification),
http://www.opengroup.org/publications/catalog/c706.htm 
.IP "\(bu" 4
\&\fBInformation technology \*(-- Open Systems Interconnection (\s-1OSI\s0) \*(-- Remote Procedure Call (\s-1RPC\s0)\fR,
\&\s-1ISO/IEC\s0 11578:1996,
August 2001, 570 pages, (\s-1CHF\s0 340,00),
http://www.iso.ch/cate/d2229.html
.IP "\(bu" 4
\&\fB\s-1HTTP\s0 Extensions for Distributed Authoring (WebDAV)\fR,
section \fB6.4.1 Node Field Generation Without the \s-1IEEE\s0 802 Address\fR,
\&\s-1IETF\s0 \s-1RFC\s0 2518,
February 1999, 94 pages,
http://www.ietf.org/rfc/rfc2518.txt
.IP "\(bu" 4
\&\fBA \s-1UUID\s0 \s-1URN\s0 Namespace\fR,
P. Leach, M. Mealling, R. Salz,
\&\s-1IETF\s0 Internet Draft draft\-mealling\-uuid\-urn\-01,
October 2003, 31 pages,
http://www.ietf.org/internet\-drafts/draft\-mealling\-uuid\-urn\-01.txt
.IP "\(bu" 4
\&\fB\s-1DCE\s0 1.1 compliant \s-1UUID\s0 functions\fR,
FreeBSD manual pages \fIuuid\fR\|(3) and \fIuuidgen\fR\|(2),
http://www.freebsd.org/cgi/man.cgi?query=uuid&manpath=FreeBSD+5.2\-RELEASE
